syntax = "proto3";
package game.bss.hearthstone;

enum Position {
  Undefined = 0;
  Front = 1;
  Back = 2;
}

message JoinRoomExtraData {
  repeated string card_code = 1; // 牌库
}

// 游戏开始随机分组事件
message RandomGroupEvent {
  repeated int32 group_index_1 = 1;
  repeated int32 group_index_2 = 2;
}

// 玩家选择位置
message SelectPositionAction { Position position = 1; }

// 玩家选择位置事件
message PlayerSelectPositionEvent {
  int32 player_index = 1;
  Position position = 2;
}

// 服务器决定位置
message ServerDecidePlayerPositionEvent {
  repeated int32 front_players = 1;
  repeated int32 back_players = 2;
}

// 卡牌
message Card { int64 card_id = 1; }

// 抽取起始卡牌
message DrawPrepareCardEvent { repeated Card cards = 1; }

// 更换起始卡牌
message ReplacePrepareCardAction { repeated int32 card_index = 1; }

// 我的回合，进行行动
message MyTurnStartEvent {}

// 我的回合结束，无法行动
message MyTurnEndEvent {}

enum TurnTypeEnum {
  PlayerTurn = 1;
  SwapTurn = 2;
}

// 新的回合
message NewTurnEvent {
  TurnTypeEnum turn_type = 1;
  optional PlayerTurnEvent player_turn = 2;
  optional SwapTurnEvent swap_turn = 3;
}

message PlayerTurnEvent {
  uint64 player_uuid = 1;
}

message SwapTurnEvent {}

// 玩家法力值变化
message PlayerManaChange {
  uint64 player_uuid = 1;
  int32 mana = 2;
}

// 目标
message Target {
  optional uint64 minion_id = 1;
  optional uint64 player = 2;
}

enum PlayerTurnActionEnum {
  PlayerEndTurn = 0;
  PlayerUseCard = 1;
  PlayerOperateMinion = 2;
}

// 玩家回合行动
message PlayerTurnAction {
  PlayerTurnActionEnum action_type = 1;
  // 回合结束
  optional PlayerEndTurnAction player_end_turn = 2;
  // 使用卡
  optional PlayerUseCardAction player_use_card = 3;
  // 操作行动
  optional PlayerOperateMinionAction player_operate_minion = 4;
}

// 回合结束
message PlayerEndTurnAction {}

// 玩家使用卡
message PlayerUseCardAction {
  int32 card_index = 1;
  optional Target target = 2;
  optional int32 summon_position = 3;
}

// 玩家操作随从
message PlayerOperateMinionAction {
  uint64 minion_id = 1;
  Target target = 2;
}

// 玩家使用卡事件
message PlayerUseCardEvent {
  uint64 player_uuid = 1;
  int32 card_index = 2;
  Card card = 3;
  int32 cost_mana = 4;
}

// 玩家使用卡事件完毕
message PlayerUseCardEndEvent {
}

// 随从入场事件
message MinionEnterEvent {
  uint64 minion_id = 1;
  int64 minion_type = 2;
  int32 group = 3;
  int32 index = 4;
  int32 atk = 5;
  int64 hp = 6;
}

// 随从离场事件
message MinionRemoveEvent { uint64 minion_id = 1; }

// 伤害
message DamageEvent {
  Target target = 1;
  int64 damage = 2;
}

// 抽牌
enum DrawCardResult {
  Ok = 1;
  Fire = 2;
  Tired = 3;
}

message DrawCardEvent {
  uint64 player_uuid = 1;
  optional Card card = 2;
  DrawCardResult draw_card_result = 3;
  optional uint32 tired = 4;
}

// 随从效果
enum MinionEffect {
  Other = 1;
  Battlecry = 2;
  Deathrattle = 3;
}

message MinionEffectEvent {
  uint64 minion_id = 1;
  MinionEffect minion_effect = 2;
}

// 交换前后场
message SwapFrontBackEvent {
  uint64 player_uuid = 1;
  Position new_position = 2;
}

// 随从攻击事件
message MinionAttackEvent {
  uint64 minion_id = 1;
  Target target = 2;
}

// buff
message Buff {
  int32 buff_type = 1;
  int32 atk_boost = 2;
  int32 hp_boost = 3;
}

message BuffEvent {
  Target target = 1;
  Buff buff = 2;
}

// 英雄死亡
message HeroDeathEvent { uint64 player = 1; }

// 游戏结束
message GameEndEvent {
  bool win = 1;
  bool lost = 2;
}

// 游戏状态同步
message SyncGameStatus {
  repeated PlayerStatus player_status = 1;
  repeated MinionStatus minion_status = 2;
  optional uint64 turn_uuid = 3;
}

message PlayerStatus {
  uint64 uuid = 1;
  int64 room_index = 2;
  int32 card_count = 3;
  repeated Card cards = 4;
  int64 hp = 5;
  int32 mana = 6;
  int32 deck_count = 7;
  Position position = 8;
  int32 camp = 9;
}

message MinionStatus {
  uint64 uuid = 1;
  int64 type_id = 2;
  int32 atk = 3;
  int64 hp = 4;
  repeated Buff buff_list = 5;
  int32 camp = 6;
}